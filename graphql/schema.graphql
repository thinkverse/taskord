"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User @auth(guard: "api")
    users: [User!]! @paginate(type: "connection")
    user(id: ID @eq): User @find
    products(orderBy: _ @orderBy(columns: ["created_at", "updated_at"])): [Product!]! @paginate(type: "connection")
    product(id: ID @eq): Product @find
    productUpdates(orderBy: _ @orderBy(columns: ["created_at", "updated_at"])): [ProductUpdate!]! @paginate(type: "connection")
    productUpdate(id: ID @eq): ProductUpdate @find
    tasks(done: Boolean! @eq, orderBy: _ @orderBy(columns: ["created_at", "updated_at", "done_at"])): [Task!]! @paginate(type: "connection")
    task(id: ID @eq @where(clause: "whereHidden")): Task @find
    comments(orderBy: _ @orderBy(columns: ["created_at", "updated_at"])): [Comment!]! @paginate(type: "connection")
    comment(id: ID @eq): Comment @find
    questions(orderBy: _ @orderBy(columns: ["created_at", "updated_at"])): [Question!]! @paginate(type: "connection")
    question(id: ID @eq): Question @find
    answers(orderBy: _ @orderBy(columns: ["created_at", "updated_at"])): [Answer!]! @paginate(type: "connection")
    answer(id: ID @eq): Answer @find
    milestones(orderBy: _ @orderBy(columns: ["created_at", "updated_at"])): [Milestone!]! @paginate(type: "connection")
    milestone(id: ID @eq): Milestone @find
}

type Mutation {
    login(
        email: String! @rules(apply: ["required", "email"])
        password: String! @rules(apply: ["required"])
    ): LoginPayload @field(resolver: "AuthMutator")
}

#import auth.graphql
#import user.graphql
#import product.graphql
#import productupdate.graphql
#import task.graphql
#import comment.graphql
#import question.graphql
#import answer.graphql
#import milestone.graphql
