"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    me: User @auth(guard: "api")
    users: [User!]! @paginate(type: "connection")
    user(id: ID @eq): User @find
    products: [Product!]! @paginate(type: "connection")
    product(id: ID @eq): Product @find
    productUpdates: [ProductUpdate!]! @paginate(type: "connection")
    productUpdate(id: ID @eq): ProductUpdate @find
    tasks(done: Boolean! @eq): [Task!]! @paginate(type: "connection", scopes: ["fetch"])
    task(id: ID @eq): Task @find
    comments: [Comment!]! @paginate(type: "connection")
    comment(id: ID @eq): Comment @find
    questions: [Question!]! @paginate(type: "connection")
    question(id: ID @eq): Question @find
    answers: [Answer!]! @paginate(type: "connection")
    answer(id: ID @eq): Answer @find
}

type Mutation {
    login(
        email: String! @rules(apply: ["required", "email"])
        password: String! @rules(apply: ["required"])
    ): LoginPayload @field(resolver: "AuthMutator")
    createTask(
        task: String! @rules(apply: ["required", "min:5", "max:10000"])
        done: Boolean!
        source: String! @rules(apply: ["required", "max:150"])
    ): CreateTaskPayload @field(resolver: "TaskMutator@create")
    praiseTask(
        id: Int!,
    ): PraiseTaskPayload @field(resolver: "TaskMutator@praise")
    deleteTask(
        id: Int!,
    ): DeleteTaskPayload @field(resolver: "TaskMutator@delete")
}

#import auth.graphql
#import user.graphql
#import product.graphql
#import productupdate.graphql
#import task.graphql
#import comment.graphql
#import question.graphql
#import answer.graphql
